#!/usr/bin/env python
# coding: utf-8

# # Naive Bayes Classifier in Python
# 
# ### Author - Wahid T. Ratul
# 
# In this kernel, I implement Naive Bayes Classification algorithm with Python and Scikit-Learn. I build a Naive Bayes Classifier to predict whether a person makes over 50K a year using the Adult Dataset @ https://www.kaggle.com/qizarafzaal/adult-dataset

# 
# ### Table of Contents
# 
# 
# 1.	[Introduction to Naive Bayes algorithm](#1)
# 2.	[Naive Bayes algorithm intuition](#2)
# 3.	[Types of Naive Bayes algorithm](#3)
# 4.	[Applications of Naive Bayes algorithm](#4)
# 5.	[Import libraries](#5)
# 6.	[Import dataset](#6)
# 7.	[Exploratory data analysis](#7)
# 8.	[Declare feature vector and target variable](#8)
# 9.	[Split data into separate training and test set](#9)
# 10.	[Feature engineering](#10)
# 11.	[Feature scaling](#11)
# 12.	[Model training](#12)
# 13.	[Predict the results](#13)
# 14.	[Check accuracy score](#14)
# 15.	[Confusion matrix](#15)
# 16.	[Classification metrices](#16)
# 17.	[Calculate class probabilities](#17)
# 18.	[ROC - AUC](#18)
# 19.	[k-Fold Cross Validation](#19)
# 20.	[Results and conclusion](#20)
# 21. [References](#21)
# 
# 
# 

# ### 1. Introduction to Naive Bayes Algorithm
# [Table of Contents](#1)
# 
# In machine learning, Naïve Bayes classification is a straightforward and powerful algorithm for the classification task. Naïve Bayes classification is based on applying Bayes’ theorem with strong independence assumption between the features. Naïve Bayes classification produces good results when we use it for textual data analysis such as Natural Language Processing.

# ### 2. Naive Bayes Algorithm Intuition
# [Table of Contents](#2)
# 
# Naïve Bayes Classifier uses the Bayes’ theorem to predict membership probabilities for each class such as the probability that given record or data point belongs to a particular class. The class with the highest probability is considered as the most likely class. This is also known as the **Maximum Likelihood ratio or Posterior ratio**. 
# 
# The **MAP for a hypothesis with 2 events A and B is**
# 
# **MAP (A)**
# 
# * max (P (A | B))
# 
# * max (P (B | A) * P (A))/P (B)
# 
# * max (P (B | A) * P (A))
# 
# 
# Here, P (B) is evidence probability. It is used to normalize the result. It remains the same, So, removing it would not affect the result.
# 
# 
# Naïve Bayes Classifier assumes that all events **A or B** are independent to each other. 
# 
# 
# In real world datasets, we test a hypothesis given multiple evidence on features. So, the calculations become quite complicated. To simplify the work, the feature independence approach is used to uncouple multiple evidence and treat each as an independent one.
# 
# 
# 

# ### 3. Types of Naive Bayes Algorithm
# 
# [Table of Contents](#3)
# 
# There are 3 types of Naïve Bayes algorithm. The 3 types are listed below:-
# 
#   1. Gaussian Naïve Bayes [**Numerical**](1)
# 
#   2. Multinomial Naïve Bayes [**Categorical**](2)
# 
#   3. Bernoulli Naïve Bayes [**Binomial**](3)
# 
# These 3 types of algorithm are explained below.

# #### Gaussian Naive Bayes Algorithm
# 
# When we have continuous attribute values, we made an assumption that the values associated with each class are distributed according to Gaussian or Normal distribution. For example, suppose the training data contains a continuous attribute x. We first segment the data by the class, and then compute the mean and variance of x in each class. Let µi be the mean of the values and let σi be the variance of the values associated with the ith class. Suppose we have some observation value xi . Then, the probability distribution of xi given a class can be computed by the following equation –
# 
# 
# ![Gaussian Naive Bayes algorithm](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQEWCcq1XtC1Yw20KWSHn2axYa7eY-a0T1TGtdVn5PvOpv9wW3FeA&s)

# #### Multinomial Naive Bayes Algorithm
# 
# With a Multinomial Naïve Bayes model, samples (feature vectors) represent the frequencies with which certain events have been generated by a multinomial
# **(p1, . . . ,pn)** where pi is the probability that event i occurs. Multinomial Naïve Bayes algorithm is preferred to use on data that is multinomially distributed. It is one of the standard algorithms which is used in text categorization classification.

# ####  Bernoulli Naive Bayes Algorithm
# 
# In the Multivariate Bernoulli event model, features are independent boolean variables **(binary variables)** describing inputs. Just like the multinomial model, this model is also popular for document classification tasks where binary term occurrence features are used rather than term frequencies.

# ### 4. Applications of Naive Bayes Algorithm
# [Table of Contents](#4)
# 
# Naïve Bayes is one of the most straightforward and fast classification algorithm. It is very well suited for large volume of data. It is successfully used in various applications such as :
# 
# * Spam filtering
# * Text classification
# * Sentiment analysis
# * Recommender systems
# 
# It uses Bayes theorem of probability for prediction of unknown class.

# ### 5. Import Libraries
# [Table of Contents](4)

# In[1]:


# Packages
import csv
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file
import matplotlib.pyplot as plt # for data visualization
import seaborn as sns # for statistical data visualization
get_ipython().run_line_magic('matplotlib', 'inline')


# ### 6. Import Dataset
# [Table of Contents](6)

# In[2]:


data = '/Users/Wahid/Downloads/adult.csv'
df = pd.read_csv(data, header=None, sep=',\s',engine='python')
df.shape
df.head()


# ### 7. Exploratory Data Analysis
# [Table of Contents](7)
# 
# #### Summary

# In[3]:


#Renaming columns 
col_names= ['age','workclass','fnlwgt','education','yrs_of_education','marital_status','occupation','relationship','race','sex','capital_gain','capital_loss','work_hrs_per_week','native_country','income']
df.columns= col_names
df.head()

# Structure of data
df.info()


# #### Types of variables
# 
# I segregate the dataset into categorical and numerical variables. There are a mixture of categorical and numerical variables in the dataset. Categorical variables have data type object. Numerical variables have data type int64.
# 
# 
# We can see that there are no missing values in the dataset. I will confirm this further.
# 

# #### Summary of Categorical Variables
# 

# In[4]:


# Explore categorical variables


# List of categorical variables take binary inputs
categorical = [var for var in df.columns if df[var].dtype=='O']

print('There are {} categorical variables\n'.format(len(categorical)))

print('The categorical variables are :\n\n', categorical)

df[categorical].head()

print('The target variable is :\n', categorical[8])


# In[5]:


# Checking missing values 

df[categorical].isnull().sum()


# In[6]:


# Frequency counts of categorical variables

for var in categorical:
    print(df[var].value_counts())


# In[7]:


# Frequency distribution of categorical variables

for var in categorical:
    print(df[var].value_counts()/np.float(len(df)))


# Now, we can see that there are several variables like **workclass, occupation and native_country** which contain missing values. Generally, the missing values are coded as NaN and python will detect them with the usual command of **df.isnull().sum()**.
# 
# **I will explore these variables and replace ? with NaN**.
# 
# 

# In[8]:


# Explore workclass variables
df.workclass.unique()


# In[9]:


# Explore frequency distribution of values in workclass 
df.workclass.value_counts()

# Replace NaN values
df['workclass'].replace('?', np.NaN, inplace=True)

df.workclass.value_counts()


# In[10]:


# Explore occupation variable
df.occupation.unique()


# In[11]:


# Explore frequency distribution of values in occupation
df['occupation'].replace('?', np.NaN, inplace=True)
df.occupation.value_counts()


# In[12]:


# Explore labels in native_country variable 
df.native_country.unique()


# In[13]:


# Explore frequency distribution of values in native_country
df['native_country'].replace('?', np.NaN, inplace=True)
df.native_country.value_counts()


# In[14]:


# Checking NaN values
df[categorical].isnull().sum()


# #### Number of labels - Cardinality
# 
# The number of labels within a categorical variable is known as **cardinality.** A high number of labels within a variable is known as high cardinality. High cardinality may pose some serious problems in the machine learning model.

# In[15]:


# Checking for cardinality in categorical variables
for var in categorical:
    print(var, 'contains', len(df[var].unique()), 'labels')


# We can see that native_country column contains relatively large number of labels as compared to other columns. I will check for cardinality after train-test split.

# #### Summary of Numerical Variables
# 

# In[16]:


# Exploring numeric variables
numerical= [var for var in df.columns if df[var].dtype!='O'] #not binary

print('There are {} numerical variables\n'.format(len(numerical)))

print('The numberical variables are:',numerical)


# In[17]:


# View numerical variables
df[numerical].head()


# In[18]:


# Checking for NaN values in numerical variables
df[numerical].isnull().sum()


# ### 8. Declare feature vector and target variable
# [Table of Contents](8)
# 

# In[19]:


# X are the independent variables
X= df.drop(['income'],axis=1)

# Y is the response variable
y= df['income']


# ### 9. Split data into training & testing set
# [Table of Contents](9)

# In[20]:


# Split X & Y into training and testing set
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3, random_state=0)

# Checking the shape of X_train & X_test
X_train.shape, X_test.shape


# ### 10. Feature Engineering 
# [Table of Contents](10)
# 
# **Feature Engineering** is the process of transforming raw data into useful features that help us to understand our model better and increase its predictive power. 

# In[21]:


# Checking data types in X_train

X_train.dtypes

# Display categorical variables

categorical= [col for col in X_train.columns if X_train[col].dtype=='O']

categorical


# In[22]:


# Display numerical variables

numerical= [col for col in X_train.columns if X_train[col].dtype !='O']

numerical


# In[23]:


# Print percentage of missing values in the categorical variables in training set

X_train[categorical].isnull().mean()


# In[24]:


# Print categorical NaN values

for col in categorical:
    if X_train[col].isnull().mean()>0:
        print(col, (X_train[col].isnull().mean()))


# In[25]:


# Input NaN values with most frequent value

for df2 in [X_train, X_test]:
    df2['workclass'].fillna(X_train['workclass'].mode()[0],inplace=True)
    
    df2['occupation'].fillna(X_train['occupation'].mode()[0],inplace=True)
    
    df2['native_country'].fillna(X_train['native_country'].mode()[0],inplace=True)
    
    
X_train[categorical].isnull().sum()
X_test[categorical].isnull().sum()


# In[26]:


# Checking for NaN in X_train, X_test

X_train.isnull().sum()
X_test.isnull().sum()


# In[27]:


# Encoding categorical variables

X_train[categorical].head()


# In[28]:


#conda install -c conda-forge category_encoders
import category_encoders as ce

# Encoding remaining variables in one-hot encoding
# Total no. of class- 1 = Total no. of encoding class

encoder= ce.OneHotEncoder(cols=['workclass','education','marital_status','occupation','relationship','race','sex','native_country'])
X_train= encoder.fit_transform(X_train)
X_test= encoder.transform(X_test)


# In[29]:


X_train.head()
X_test.head()
#X_test.shape


# We now have training and testing set ready for model building. Before that, we should map all the feature variables onto the same scale. It is called **feature scaling**. 

# ### 11. Feature Scaling
# [Table of Contents](11)
# 
# 

# In[35]:


cols= X_train.columns


# In[36]:


# Scaling the data

from sklearn.preprocessing import RobustScaler

scaler = RobustScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)


# In[37]:


X_train = pd.DataFrame(X_train, columns=[cols])


# In[38]:


X_test = pd.DataFrame(X_test, columns=[cols])


# In[39]:


X_train.head()


# We now have X_train dataset ready to be fed into the **Gaussian Naive Bayes classifier**. 
# 
# ### 12. Model Training
# [Table of Contents](12)

# In[40]:


# Train a Gaussian Naive Bayes Classifier on the training set
from sklearn.naive_bayes import GaussianNB

gnb= GaussianNB()

# Fit the model
gnb.fit(X_train,y_train)


# ### 13. Predicting the results
# [Table of Contents](13)

# In[41]:


y_pred= gnb.predict(X_test)
y_pred


# ### 14. Check Accuracy Score
# [Table of Contents](14)

# In[42]:


from sklearn.metrics import accuracy_score

print('Model accuracy score: {0:0.4f}'.format(accuracy_score(y_test,y_pred)))


# Here, **y_test** are the true class labels and **y_pred** are the predicted class labels in the test-set.
# 
# #### Compare the train-set and test-set accuracy
# I will compare the train-set and test-set accuracy to check for overfitting.

# In[43]:


y_pred_train= gnb.predict(X_train)
y_pred_train


# In[44]:


print('Training-set accuracy score: {0:0.4f}'.format(accuracy_score(y_train,y_pred_train)))


# #### Check for overfitting and underfitting
# 
# When checking for over/under-fitting compare with PDF score.

# In[45]:


# Print the scores on the training & testing sets
print('Training set score:{:.4f}'.format(gnb.score(X_train,y_train)))

print('Testing set score:{:.4f}'.format(gnb.score(X_test,y_test)))


# The **training-set accuracy score is 0.8067 while the test-set accuracy to be 0.8083**. These two values are quite comparable. So, there is no sign of overfitting.
# 
# #### Compare model accuracy with Null Accuracy
# 
# The **model accuracy is 0.8083**. But, we cannot say that our model is very good based on the above accuracy. We must compare it with the null accuracy. **Null accuracy** is the accuracy that could be achieved by always predicting the most frequent class.

# In[52]:


# Checking class distribution in the test set
y_test.value_counts()


# We can see that the occurences of most frequent class is 7407. So, we can calculate null accuracy by dividing 7407 by total number of occurences.

# In[60]:


# Checking null accuracy score
null_accuracy= (7407/(y_test.value_counts().sum()))

print('Null accuracy score: {0:0.4f}'. format(null_accuracy))


# We can see that our **model accuracy score is 0.8083 but null accuracy score is 0.7582**. So, we can conclude that our Gaussian Naive Bayes Classification model is doing a very good job in predicting the class labels.
# 
# Based on the above analysis we can conclude that our classification model accuracy is very good. Our model is doing a very good job in terms of predicting the class labels.
# 
# But, it does not give the underlying distribution of values. Also, it does not tell anything about the type of errors our classifer is making.
# 

# ### 15. Confusion Matrix
# [Table of Contents](15)
# 
# A confusion matrix is a tool for summarizing the performance of a classification algorithm. A confusion matrix will give us a clear picture of classification model performance and the types of errors produced by the model. It gives us a summary of correct and incorrect predictions broken down by each category. The summary is represented in a tabular form.
# 
# Four types of outcomes are possible while evaluating a classification model performance. These four outcomes are described below:-
# 
# **True Positives (TP)** – True Positives occur when we predict an observation belongs to a certain class and the observation actually belongs to that class.
# 
# **True Negatives (TN)** – True Negatives occur when we predict an observation does not belong to a certain class and the observation actually does not belong to that class.
# 
# **False Positives (FP)** – False Positives occur when we predict an observation belongs to a certain class but the observation actually does not belong to that class. This type of error is called Type I error.
# 
# **False Negatives (FN)** – False Negatives occur when we predict an observation does not belong to a certain class but the observation actually belongs to that class. This is a very serious error and it is called Type II error.
# 
# These four outcomes are summarized in a confusion matrix given below.

# In[73]:


# Print the Confusion Matrix and slice it into four categories
from sklearn.metrics import confusion_matrix

cm= confusion_matrix(y_test,y_pred)

print('Confusion Matrix\n\n',cm)

print('\nTrue Positives(TP)=',cm[0,0])
print('\nTrue Negatives(NP)=',cm[1,1])
print('\nFalse Positives(FP)=',cm[0,1])
print('\nFalse Negatives(FN)=',cm[1,0])


# The confusion matrix shows 5999 + 1897 = 7896 correct predictions and 1408 + 465 = 1873 incorrect predictions.
# 
# In this case, we have
# 
# * **True Positives** (Actual Positive:1 and Predict Positive:1) - 5999
# 
# * **True Negatives** (Actual Negative:0 and Predict Negative:0) - 1897
# 
# * **False Positives** (Actual Negative:0 but Predict Positive:1) - 1408 (Type I error)
# 
# * **False Negatives** (Actual Positive:1 but Predict Negative:0) - 465 (Type II error)

# In[76]:


# Visualize Confusion Matrix with seaborn heatmap
cm_matrix = pd.DataFrame(data=cm, columns=['Actual Positive:1', 'Actual Negative:0'], 
                                 index=['Predict Positive:1', 'Predict Negative:0'])

sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')


# ### 16. Classification Metrices
# [Table of Contents](16)
# 
# **Classification report** is another way to evaluate the classification model performance. It displays the **precision, recall, f1** and **support scores** for the model.

# In[78]:


from sklearn.metrics import classification_report

print(classification_report(y_test,y_pred))


# In[81]:


# Classification Accuracy
TP= cm[0,0]
TN= cm[1,1]
FP= cm[0,1]
FN= cm[1,1]

# Print Classification Accuracy
classification_accuracy= (TP+TN)/float(TP+TN+FP+FN)

print('Classification Accuracy: {0:0.4f}'.format(classification_accuracy))


# In[82]:


# Print Classification Error
classification_error= (FP+FN)/float(TP+TN+FP+FN)

print('Classification Error: {0:0.4f}'.format(classification_error))


# **Precision** can be defined as the **percentage of correctly predicted positive outcomes out of all the predicted positive outcomes**. It can be given as the ratio of true positives (TP) to the sum of true and false positives (TP + FP).
# 
# **Precision** identifies the proportion of correctly predicted positive outcome. It is more concerned with the positive class than the negative class.
# 
# Mathematically, precision can be defined as the ratio of **TP to (TP + FP)**.

# In[84]:


# Print Precision
precision= TP/float(TP+FP)

print('Precision: {0:0.4f}'.format(precision))


# **Recall/True Positive Rate** can be defined as the **percentage of correctly predicted positive outcomes out of all the actual positive outcomes**. It can be given as the ratio of true positives (TP) to the sum of true positives and false negatives (TP + FN). **Recall** is also called **Sensitivity**.
# 
# **Recall** identifies the proportion of correctly predicted actual positives.
# 
# Mathematically, recall can be given as the ratio of TP to (TP + FN).

# In[85]:


# Print Recall
recall= TP/float(TP+FN)

print('Recall or Sensitivity :{0:0.4f}'.format(recall))


# In[86]:


# Print False Positive Rate
false_positive_rate= FP/float(FP+TN)

print('False Positive Rate: {0:0.4f}'.format(false_positive_rate))


# In[87]:


# Print Specificity Rate
specificity= TN/float(TN+FP)

print('Specificity: {0:0.4f}'.format(specificity))


# **f1-score** is the weighted harmonic mean of precision and recall. The best possible **f1-score** would be 1.0 and the worst would be 0.0. **f1-score** is the harmonic mean of precision and recall. So, **f1-score** is always lower than accuracy measures as they embed precision and recall into their computation. The weighted average of **f1-score** should be used to compare classifier models, not global accuracy.
# 
# **Support** is the actual number of occurrences of the class in our dataset.

# ### 17. Calculate Class Probabilities
# [Table of Contents](17)

# In[94]:


# Print the first 10 predicted probabilities of 2classes- 0 & 1
y_pred_prob= gnb.predict_proba(X_test)[0:10]
y_pred_prob


# #### Observations
# 
# * In each row, the numbers sum to 1.
# 
# There are 2 columns which correspond to 2 classes - **<=50K and >50K** :
# 
# * Class 0 => <=50K - Class that a person makes less than equal to 50K.
# 
# * Class 1 => >50K - Class that a person makes more than 50K.
# 
# Importance of predicted probabilities:
# 
# * We can rank the observations by probability of whether a person makes less than or equal to 50K or more than 50K.
# 
# Predict_proba process:
# 
# * Predicts the probabilities:
# 
# * Choose the class with the highest probability
# 
# Classification threshold level:
# 
# * There is a classification threshold level of 0.5.
# 
# * Class 0 => <=50K - probability of salary less than or equal to 50K is predicted if probability < 0.5.
# 
# * Class 1 => >50K - probability of salary more than 50K is predicted if probability > 0.5.

# In[95]:


# Storing the conditional probabilities within a dataframe
y_pred_prob_df= pd.DataFrame(data=y_pred_prob, columns=['Prob of - <=50k', 'Prob of - >50k'])

y_pred_prob_df


# In[99]:


# Printing the initial predicted probabilities for class 1 = P(X>50k)
gnb.predict_proba(X_test)[0:10,1]

# Storing the list of predicted probabilities for P(X>50k)
y_pred1= gnb.predict_proba(X_test)[:,1]


# In[101]:


# Plotting histogram of predicted probabilities
# Adjusting the font size
plt.rcParams['font.size']=12

# Plot histogram with 10 bins
plt.hist(y_pred1, bins=10)

plt.title('Histogram of Predicted Probabilities of Salaries >50k')
plt.xlim(0,1)

plt.xlabel('Predicted Probabilities of Salaries >50k')
plt.ylabel('Frequency')


# #### Observations
# 
# * We can see that the above histogram is highly positive skewed.
# 
# * The first column tell us that there are approximately 5700 observations with probability between 0.0 and 0.1 whose salary is <=50K.
# 
# * There are relatively small number of observations with probability > 0.5.
# 
# * So, these small number of observations predict that the salaries will be >50K.
# 
# * Majority of observations predcit that the salaries will be <=50K.

# ### 18. ROC - AUC
# [Table of Contents](18)
# 
# #### ROC Curve
# 
# Another tool to measure the classification model performance visually is **ROC Curve**. ROC Curve stands for **Receiver Operating Characteristic Curve**. An **ROC Curve** is a plot which shows the performance of a classification model at various classification threshold levels.
# 
# The **ROC Curve** plots the **True Positive Rate (TPR)** against the **False Positive Rate (FPR)** at various threshold levels.
# 
# **True Positive Rate (TPR)** is also called Recall. It is defined as the ratio of TP to (TP + FN).
# 
# **False Positive Rate (FPR)** is defined as the ratio of FP to (FP + TN).
# 
# In the **ROC Curve**, we will focus on the TPR (True Positive Rate) and FPR (False Positive Rate) of a single point. This will give us the general performance of the ROC curve which consists of the TPR and FPR at various threshold levels. So, an ROC Curve plots TPR vs FPR at different classification threshold levels. If we lower the threshold levels, it may result in more items being classified as positve. It will increase both True Positives (TP) and False Positives (FP).

# In[104]:


# Plot the ROC curve
from sklearn.metrics import roc_curve

fpr, tpr, thresholds = roc_curve(y_test, y_pred1, pos_label = '>50K')

plt.figure(figsize=(6,4))

plt.plot(fpr, tpr, linewidth=2)

plt.plot([0,1], [0,1], 'k--' )

plt.rcParams['font.size'] = 12

plt.title('ROC curve for Gaussian Naive Bayes Classifier for Predicting Salaries')

plt.xlabel('False Positive Rate (1 - Specificity)')

plt.ylabel('True Positive Rate (Sensitivity)')

plt.show()


# **ROC curve** help us to choose a threshold level that balances sensitivity and specificity for a particular context.
# 
# #### ROC AUC
# 
# **ROC AUC** stands for **Receiver Operating Characteristic - Area Under Curve**. It is a technique to compare classifier performance. In this technique, we measure the area under the curve (AUC). A perfect classifier will have a **ROC AUC** equal to 1, whereas a purely random classifier will have a **ROC AUC** equal to 0.5.
# 
# So, **ROC AUC** is the percentage of the ROC plot that is underneath the curve.

# In[110]:


# Computing the ROC AUC
from sklearn.metrics import roc_auc_score

ROC_AUC= roc_auc_score(y_test,y_pred1)

print('ROC AUC: {0:.4f}'.format(ROC_AUC))


# #### Interpretation
# 
# * **ROC AUC** is a single number summary of classifier performance. The higher the value, the better the classifier.
# 
# 
# * **ROC AUC** of our model approaches towards 1. So, we can conclude that our classifier does a good job in predicting whether it will rain tomorrow or not.

# In[113]:


# Computing Cross-Validation ROC AUC
from sklearn.model_selection import cross_val_score

Cross_validated_ROC_AUC = cross_val_score(gnb, X_train, y_train, cv=5, scoring='roc_auc').mean()

print('Cross-Validated ROC AUC : {0:.4f}'.format(Cross_validated_ROC_AUC))


# ### 19. K-Fold Cross Validation
# [Table of Contents](19)

# In[115]:


# Applying 10-Fold Cross Validation
from sklearn.model_selection import cross_val_score

scores= cross_val_score(gnb, X_train, y_train, cv=10, scoring='accuracy')

print('Cross-Validation Score: {}'.format(scores))


# We can summarize the **cross-validation accuracy** by calculating its mean.

# In[116]:


# Computing Average Cross-Validation Score
print('Average Cross-Validation Score: {0:.4f}'.format(scores.mean()))


# #### Interpretation
# 
# * Using the mean cross-validation, we can conclude that we expect the model to be around 80.63% accurate on average.
# 
# * If we look at all the 10 scores produced by the 10-fold cross-validation, we can also conclude that there is a relatively small variance in the accuracy between folds, ranging from 81.35% accuracy to 79.64% accuracy. So, we can conclude that the model is independent of the particular folds used for training.
# 
# * Our original **model accuracy is 0.8083**, but the **mean cross-validation accuracy is 0.8063**. So, the 10-fold cross-validation accuracy does not result in performance improvement for this model.

# ### 20. Results & Conclusion
# [Table of Contents](20)
# 
# 1. In this project, I build a **Gaussian Naïve Bayes Classifier model to predict whether a person makes over 50K a year**. The model yields a very good performance as indicated by the model accuracy which was found to be 0.8083.
# 
# 2. **The training-set accuracy score is 0.8067 while the test-set accuracy to be 0.8083**. These two values are quite comparable. So, there is no sign of overfitting.
# 
# 3. I have compared **the model accuracy score which is 0.8083 with null accuracy score which is 0.7582**. So, we can conclude that our Gaussian Naïve Bayes classifier model is doing a very good job in predicting the class labels.
# 
# 4. ROC AUC of our model approaches towards 1. So, we can conclude that our classifier does a very good job in predicting whether a person makes over 50K a year.
# 
# 5. Using the mean cross-validation, we can conclude that we expect **the model to be around 80.63% accurate on average**.
# 
# 6. If we look at all the 10 scores produced by the 10-fold cross-validation, we can also conclude that there is a relatively small variance in the accuracy between folds, ranging from 81.35% accuracy to 79.64% accuracy. So, we can conclude that the model is independent of the particular folds used for training.
# 
# 7. **Our original model accuracy is 0.8083, but the mean cross-validation accuracy is 0.8063**. So, the 10-fold cross-validation accuracy does not result in performance improvement for this model.
# 

# ### 21. References
# [Table of Contents](21)
# 
# The work done in this project is inspired from following books and websites:-
# 
# 1. Hands on Machine Learning with Scikit-Learn and Tensorflow by Aurélién Géron
# 
# 2. Introduction to Machine Learning with Python by Andreas C. Müller and Sarah Guido
# 
# 3. Udemy course – Machine Learning – A Z by Kirill Eremenko and Hadelin de Ponteves
# 
# 4. https://en.wikipedia.org/wiki/Naive_Bayes_classifier
# 
# 5. http://dataaspirant.com/2017/02/06/naive-bayes-classifier-machine-learning/
# 
# 6. https://www.datacamp.com/community/tutorials/naive-bayes-scikit-learn
# 
# 7. https://stackabuse.com/the-naive-bayes-algorithm-in-python-with-scikit-learn/
# 
# 8. https://jakevdp.github.io/PythonDataScienceHandbook/05.05-naive-bayes.html

# In[ ]:




